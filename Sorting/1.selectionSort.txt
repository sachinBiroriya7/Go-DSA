selection sort :

we consider 1st element as the smallest element in the list, considering it as, it's in its sorted position.
iterate over the remaining Unsorted list, swap it with the index which is smaller that the above "considered smallest element"
After 1 iteration of the comparison loop, we will have 1st element of array is minimum and at its sorted position.

Repeat same for ext remaining elements.

compare and swap only for arr[n-1], bcz if n-1 are sorted, so nth element will be at its sorted place.
i.e if size(n) = 5, then compare only till (i=4)

and arr are zero index based, hence at time of iteration.
i=3(0,1,2,3)


example :

1st iteration (when i=0)
{51, 411, 32, 21, 1}
j=i+1=1 -> {51, 411, 32, 21, 1}
	j=2 -> {32, 411, 51, 21, 1}
	j=3 -> {21, 411, 51, 32, 1}
	j=4 -> {1, 411, 51, 21, 32}
i=0 -> has the smallest element of the list hence sorted
	
	
2nd iteration (when i=1)
{1, 411, 51, 21, 32}
j=i+1=2 -> {1, 51, 411, 21, 32}
	j=3 -> {1, 21, 411, 51, 32}
	j=4 -> {1, 21, 411, 51, 32}
i=0,1 -> has the smallest element of the list hence sorted

	
3rd iteration (when i=2)
{1, 21, 411, 51, 32}	
j=i+1=3 -> {1, 21, 51, 411, 32}
	j=4 -> {1, 21, 32, 411, 51}

i=0,1,2 -> has the smallest element of the list hence sorted


4th iteration (when i=3)
{1, 21, 32, 411, 51}	
j=i+1=4 -> {1, 21, 32, 51, 411}
	

i=0,1,2 -> has the smallest element of the list hence sorted
